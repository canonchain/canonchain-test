<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="test plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP default requests" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">127.0.0.1</stringProp>
        <stringProp name="HTTPSampler.port">6765</stringProp>
        <stringProp name="HTTPSampler.protocol">http</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="user defined VAR" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="accountThreadNum" elementType="Argument">
            <stringProp name="Argument.name">accountThreadNum</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">account_create线程数</stringProp>
          </elementProp>
          <elementProp name="accountCycleTimes" elementType="Argument">
            <stringProp name="Argument.name">accountCycleTimes</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">account_create线程循环次数</stringProp>
          </elementProp>
          <elementProp name="accountFilePath" elementType="Argument">
            <stringProp name="Argument.name">accountFilePath</stringProp>
            <stringProp name="Argument.value">.\examples\accounts.txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">account_create账户生成写入的文件路径(send发送交易账户存在的路径)</stringProp>
          </elementProp>
          <elementProp name="accountJson" elementType="Argument">
            <stringProp name="Argument.name">accountJson</stringProp>
            <stringProp name="Argument.value">{\&quot;account\&quot;:\&quot;czr_33EuccjKjcZgwbHYp8eLhoFiaKGARVigZojeHzySD9fQ1ysd7u\&quot;,\&quot;kdf_salt\&quot;:\&quot;774DDE2B6D01D6A2B000BB42F8118E2C\&quot;,\&quot;iv\&quot;:\&quot;5EF469016DB117B4437FB46D37BFA925\&quot;,\&quot;ciphertext\&quot;:\&quot;2B9567F4184B4D0A4AD9D5A3BF94805662B562167AFBEC575B06C23F708F0CA0\&quot;}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">基因账户以及基因账户的加密信息</stringProp>
          </elementProp>
          <elementProp name="from" elementType="Argument">
            <stringProp name="Argument.name">from</stringProp>
            <stringProp name="Argument.value">czr_33EuccjKjcZgwbHYp8eLhoFiaKGARVigZojeHzySD9fQ1ysd7u</stringProp>
            <stringProp name="Argument.desc">基因账户（为其他账户充值）</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="initAmount" elementType="Argument">
            <stringProp name="Argument.name">initAmount</stringProp>
            <stringProp name="Argument.value">1000000000000000000</stringProp>
            <stringProp name="Argument.desc">基因账户总金额</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accountCreateNum" elementType="Argument">
            <stringProp name="Argument.name">accountCreateNum</stringProp>
            <stringProp name="Argument.value">50000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">account_create 生成账户数量</stringProp>
          </elementProp>
          <elementProp name="sendThreadNum" elementType="Argument">
            <stringProp name="Argument.name">sendThreadNum</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">send线程数</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sendCycletimes" elementType="Argument">
            <stringProp name="Argument.name">sendCycletimes</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">send线程循环次数</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sendTradeCounts" elementType="Argument">
            <stringProp name="Argument.name">sendTradeCounts</stringProp>
            <stringProp name="Argument.value">2000000</stringProp>
            <stringProp name="Argument.desc">send交易次数</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="randomAmount" elementType="Argument">
            <stringProp name="Argument.name">randomAmount</stringProp>
            <stringProp name="Argument.value">${__Random(1,1000,test_send_amount)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">在1到1000内随机生成交易金额数</stringProp>
          </elementProp>
          <elementProp name="autoAssistConfigJsonFile" elementType="Argument">
            <stringProp name="Argument.name">autoAssistConfigJsonFile</stringProp>
            <stringProp name="Argument.value">C:\configTest.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">自动化辅助JSON文件</stringProp>
          </elementProp>
          <elementProp name="remoteGenenisAccount" elementType="Argument">
            <stringProp name="Argument.name">remoteGenenisAccount</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">避免双花而生成的四个子账户</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accountAndDataFileDeletion" elementType="Argument">
            <stringProp name="Argument.name">accountAndDataFileDeletion</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.desc">1 ：不清除数据</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setBatRunning" enabled="false">
        <stringProp name="TestPlan.comments">using BeanShell Sampler to invoke .bat files</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <longProp name="ThreadGroup.start_time">1543805857000</longProp>
        <longProp name="ThreadGroup.end_time">1543805857000</longProp>
      </SetupThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="runBat${__machineIP}" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.*;
import org.json.*;
import java.util.*;
import java.util.concurrent.TimeUnit;

String filePath = vars.get(&quot;autoAssistConfigJsonFile&quot;);
File file = new File(filePath);
String keyStore = new String();
String[] valueStore  = new String[]{};
int count=0;
String delPathStore = new String();

try
{
    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(file),&quot;utf-8&quot;));
    String string = null;
    while ((string = bufferedReader.readLine())!=null)
    {
        JSONObject jsonObject = new JSONObject(string);
        Iterator iterator = jsonObject.keys();
        while(iterator.hasNext())
        {
            String key = (String) iterator.next();
            String value = jsonObject.getString(key);            
            valueStore = Arrays.copyOf(valueStore,valueStore.length + 1);
            valueStore[count] = value;
            if (key.equals(&quot;switchedPath&quot;))
            {
                keyStore = jsonObject.getString(&quot;switchedPath&quot;);
            }
            if (key.equals(&quot;delPath&quot;))
            {
                delPathStore = jsonObject.getString(&quot;delPath&quot;);
            }
            //valueStore.add(value);
            count += 1;
        }
    }
            bufferedReader.close();
}
catch(IOException e)
{
    e.printStackTrace();
}

class RunBat
{
    private String cmd;
    private String [] cmdArray = new String[]{};
    private String cmdPrefix = &quot;cmd /K start &quot;; //&quot;cmd /k start&quot; : 打开cmd窗口后执行start后的指令，执行完不关闭窗口
    private String switchedPath = new String();
    private String delPath = new String();
    String accountAndDataFileDeletion = vars.get(&quot;accountAndDataFileDeletion&quot;);
    int accountFileDeletionTag =  Integer.valueOf(accountAndDataFileDeletion).intValue();

    void runExec(String cmd,String switchedPath)
    {
        Runtime.getRuntime().exec(cmd,null,new File(switchedPath));//可以使用exec(new String[]{ },null,dir)进行改进
        try
        {
            TimeUnit.SECONDS.sleep(2);	
        }
        catch(InterruptedException e)
        {
             e.printStackTrace();
        }	
    }

    void runExec(String cmd)
    {
        Runtime.getRuntime().exec(cmd);//可以使用exec(new String[]{ },null,dir)进行改进
        try
        {
            TimeUnit.SECONDS.sleep(2);	
        }
        catch(InterruptedException e)
        {
             e.printStackTrace();
        }	
    }    
    
    void runMethod(String [] batAbsolutePath,String switchedPath,String delPath)
    {
        this.cmdArray  = Arrays.copyOf(batAbsolutePath,batAbsolutePath.length);
        this.delPath = delPath;
        this.switchedPath = switchedPath;
	 
        if (this.accountFileDeletionTag != 1)
        {
            runExec(this.delPath);	
        }
        
        try
        {
            for (String batAbsPath : this.cmdArray)
            {
                if ((!batAbsPath.equals(this.delPath))&amp;&amp;(!batAbsPath.equals(this.switchedPath)))
                {
                    this.cmd = this.cmdPrefix + batAbsPath;
                    runExec(this.cmd,this.switchedPath);
            	  }
            }
        }
        catch(IOException e)
        {
            e.printStackTrace();
        }
    }   
}

RunBat runBat = new RunBat();
runBat.runMethod(valueStore,keyStore,delPathStore);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RemoteFirstAccountCreate" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <longProp name="ThreadGroup.start_time">1543805857000</longProp>
        <longProp name="ThreadGroup.end_time">1543805857000</longProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="account_import" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;action&quot;: &quot;account_import&quot;,&#xd;
&quot;json&quot;:&quot;${accountJson}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="response assert" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="833911223">&quot;account&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="account_register" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;action&quot;:&quot;account_create&quot;,&#xd;
&quot;password&quot;:&quot;${password}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV 1" enabled="true">
            <stringProp name="filename">create.txt</stringProp>
            <stringProp name="fileEncoding">utf-8</stringProp>
            <stringProp name="variableNames">password</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="account extraction" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">remoteGenenisAccount</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;account&quot;: &quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">0</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="response assert" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="833911223">&quot;account&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">remoteGenenisAccount</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.account</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="write" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.*;
//import org.apache.log4j.Logger;
// 传入jmeter 变量 account  ,使用java变量 message接收
String message= vars.get(&quot;remoteGenenisAccount&quot;);
String filePath= vars.get(&quot;accountFilePath&quot;);

try
{
    File file = new File(filePath);
//如果文件不存在,就新建一个文件;
//在jmeter的/bin目录下会生成jmeter.log日志；
//将日志参数设为 log_level.jmeter=ERROR ，log_level.jmeter.junit=DEBUG即可；
//        log.error(&quot;Attention : File deletion failed!&quot;);
    if(file.exists() &amp;&amp; !file.delete())
    {
        System.out.println(&quot;Attention : File deletion failed!&quot;);
    }	
//文件末尾追加写入文件;
// 追加写入
//    BufferedOutputStream bufferedOutputStream = new BufferedOutputStream((new FileOutputStream(filePath,true)));
//不追加写入
    BufferedOutputStream bufferedOutputStream = new BufferedOutputStream((new FileOutputStream(filePath)));
    bufferedOutputStream.write(message.getBytes());
    bufferedOutputStream.close();    
}
catch(IOException e)
{
    e.printStackTrace();
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters">remoteGenenisAccount</stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="send" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
        &quot;action&quot;: &quot;send_block&quot;,&#xd;
        &quot;from&quot;: &quot;${from}&quot;,&#xd;
        &quot;to&quot;: &quot;${remoteGenenisAccount}&quot;,&#xd;
        &quot;amount&quot;: &quot;${initAmount}&quot;,&#xd;
        &quot;password&quot;: &quot;${password}&quot;,&#xd;
        &quot;data&quot;: &quot;&quot;,&#xd;
        &quot;need_wait&quot;:&quot;true&quot;,&#xd;
        &quot;gas&quot;:0&#xd;
        }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">send amount to activate / initialize created accounts</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config " enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding">utf-8</stringProp>
            <stringProp name="filename">create.txt</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">password</stringProp>
          </CSVDataSet>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="respose assert" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1072440818">&quot;hash&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AccountCreateSync" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${accountCycleTimes}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${accountThreadNum}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1532659913000</longProp>
        <longProp name="ThreadGroup.end_time">1532659913000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">生成交易账户</stringProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="account-create" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="account_import" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;action&quot;: &quot;account_import&quot;,&#xd;
&quot;json&quot;:&quot;${accountJson}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="response assert" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="833911223">&quot;account&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="get_createCount" enabled="true">
            <stringProp name="TestPlan.comments">get_totallines&amp;get_createCount</stringProp>
            <stringProp name="BeanShellSampler.query">import java.io.*;
// 传入jmeter 变量 accountFilePath  ,使用java变量 filePath接收
String  filePath = vars.get(&quot;accountFilePath&quot;);
int count = 0;

try
{
    File file = new File(filePath);
    // 读文件
    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(file.getAbsolutePath()), &quot;UTF-8&quot;));
    // 循环获取文件行数
    String str = null;
    //读取remoteGenesisiAccount;
    LineNumberReader reader = new LineNumberReader(bufferedReader);
    String firstLine = reader.readLine();
    vars.put(&quot;remoteGenenisAccount&quot;,firstLine);
    reader.close();

    while ((str = bufferedReader.readLine()) != null)
    { 
        count = count + 1;
    }
    bufferedReader.close(); 
}
catch(IOException e)
{
    e.printStackTrace();
}
//vars.put(&quot;total_lines&quot;,String.valueOf(count));
String accountCreateNum =  vars.get(&quot;accountCreateNum&quot;);
int a =  Integer.valueOf(accountCreateNum).intValue();
int c = (int) (a - count);//若a&lt;b这里c是负数

if (c &lt; 0 ) 
{
   break;
}

String d = String.valueOf(c);
//System.out.println(d);
vars.put(&quot;createCount&quot;,d);









</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="recycle-controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${createCount}</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="account_register${__machineIP}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;action&quot;:&quot;account_create&quot;,&#xd;
&quot;password&quot;:&quot;${password}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV 1" enabled="true">
                <stringProp name="filename">create.txt</stringProp>
                <stringProp name="fileEncoding">utf-8</stringProp>
                <stringProp name="variableNames">password</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="account extraction" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">to</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;account&quot;: &quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="response assert" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="833911223">&quot;account&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">to</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.account</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="write" enabled="true">
              <stringProp name="BeanShellSampler.query">import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
//import org.apache.log4j.Logger;

// 传入jmeter 变量 account  ,使用java变量 message接收
String message= vars.get(&quot;to&quot;);
String filePath= vars.get(&quot;accountFilePath&quot;);

try
{
    File file = new File(filePath);
// 文件末尾追加写入文件      
    BufferedOutputStream bufferedOutputStream = new BufferedOutputStream((new FileOutputStream(filePath,true)));
    bufferedOutputStream.write(&quot;\n&quot;.getBytes());
    bufferedOutputStream.write(message.getBytes());
    bufferedOutputStream.close();   
}
catch(IOException e)
{
    e.printStackTrace();
}
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="send" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;action&quot;: &quot;send_block&quot;,&#xd;
        &quot;from&quot;: &quot;${remoteGenenisAccount}&quot;,&#xd;
        &quot;to&quot;: &quot;${to}&quot;,&#xd;
        &quot;amount&quot;: &quot;1000000&quot;,&#xd;
        &quot;password&quot;: &quot;${password}&quot;,&#xd;
        &quot;data&quot;: &quot;&quot;,&#xd;
        &quot;need_wait&quot;:&quot;true&quot;,&#xd;
        &quot;gas&quot;:0&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">send amount to activate / initialize created accounts</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="from" enabled="false">
                <stringProp name="filename">${accountFilePath}</stringProp>
                <stringProp name="fileEncoding">utf-8</stringProp>
                <stringProp name="variableNames">remoteGenenisAccount</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.io.*;
// 传入jmeter 变量 accountFilePath  ,使用java变量 filePath接收
String  filePath = vars.get(&quot;accountFilePath&quot;);
try
{
    File file = new File(filePath);
    // 读文件
    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(file.getAbsolutePath()), &quot;UTF-8&quot;));
    String str = null;
    LineNumberReader reader = new LineNumberReader(bufferedReader);
    String firstLine = reader.readLine();
    vars.put(&quot;remoteGenenisAccount&quot;,firstLine);
    reader.close();
}
catch(IOException e)
{
    e.printStackTrace();	
}</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config " enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding">utf-8</stringProp>
                <stringProp name="filename">create.txt</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">password</stringProp>
              </CSVDataSet>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="respose assert" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1072440818">&quot;hash&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="send" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1543819443000</longProp>
        <longProp name="ThreadGroup.end_time">1543819443000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="send" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="get_sendCount" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.*;

String sendTradeCounts =  vars.get(&quot;sendTradeCounts&quot;);

//sendTradeCounts为空处理
if (sendTradeCounts == null || sendTradeCounts.equals(&quot;&quot;))
{
     vars.put(&quot;sendTradeCounts&quot;,&quot;0&quot;);	
}

String sendThreadNum =  vars.get(&quot;sendThreadNum&quot;);
int a =  Integer.valueOf(sendTradeCounts).intValue();
int b = Integer.valueOf(sendThreadNum).intValue();
int c = 0;

try
{
    c = (int) (a / b);
}
catch(ArithmeticException e)
{
    e.printStackTrace();	
}

String s = String.valueOf(c);
System.out.println(s);
//存储value到变量sendCount
vars.put(&quot;sendCount&quot;,s); </stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters">${sendTradeCounts}</stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="recycle controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${sendCount}</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="send${__machineIP}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;action&quot;:&quot;send_block&quot;,&#xd;
        &quot;from&quot;:&quot;${fromm}&quot;,&#xd;
        &quot;to&quot;:&quot;${reach}&quot;,&#xd;
        &quot;amount&quot;: &quot;${randomAmount}&quot;,&#xd;
        &quot;password&quot;: &quot;${password}&quot;,&#xd;
        &quot;data&quot;: &quot;&quot;,&#xd;
        &quot;gas&quot;:&quot;0&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="from" enabled="true">
                <stringProp name="filename">${accountFilePath}</stringProp>
                <stringProp name="fileEncoding">utf-8</stringProp>
                <stringProp name="variableNames">fromm</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="to" enabled="true">
                <stringProp name="filename">${accountFilePath}</stringProp>
                <stringProp name="fileEncoding">utf-8</stringProp>
                <stringProp name="variableNames">reach</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="password" enabled="true">
                <stringProp name="filename">create.txt</stringProp>
                <stringProp name="fileEncoding">utf-8</stringProp>
                <stringProp name="variableNames">password</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="response assert" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1072440818">&quot;hash&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="results-tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="aggregated report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown thread group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <longProp name="ThreadGroup.start_time">1543805857000</longProp>
        <longProp name="ThreadGroup.end_time">1543805857000</longProp>
      </PostThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="closeBat" enabled="false">
          <stringProp name="TestPlan.comments">using Beanshell Scripts to close nodes</stringProp>
          <stringProp name="BeanShellSampler.query">import java.io.*;
//String cmdd = &quot;cmd.exe /c start wmic process where name=&apos;canonchain.exe&apos; terminate&quot;;
//要关闭窗口直接改为cmd /k，若程序运行异常，则无法关闭窗口
String cmdd = &quot;cmd.exe /K start wmic process where name=&apos;canonchain.exe&apos; terminate&quot;;

try
{
	Runtime.getRuntime().exec(cmdd);	
}
catch(IOException e)
{
	e.printStackTrace();	
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="closeBat" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;action&quot;:&quot;stop&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="工作台" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
